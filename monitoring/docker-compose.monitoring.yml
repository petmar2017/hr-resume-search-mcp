# Docker Compose for HR Resume Search Monitoring Stack
# Usage: docker-compose -f docker-compose.monitoring.yml up -d

version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: hr-resume-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.service=prometheus"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.2
    container_name: hr-resume-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_me
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_dashboard.json:/var/lib/grafana/dashboards/hr-resume-search.json:ro
      - ./grafana_provisioning/:/etc/grafana/provisioning/:ro
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - "monitoring.service=grafana"

  # Redis for caching (if not running elsewhere)
  redis:
    image: redis:7.2-alpine
    container_name: hr-resume-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.service=redis"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: hr-resume-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.service=node-exporter"

  # Optional: Alertmanager for alert routing
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: hr-resume-alertmanager
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "monitoring.service=alertmanager"

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  monitoring:
    driver: bridge
    name: hr-resume-monitoring